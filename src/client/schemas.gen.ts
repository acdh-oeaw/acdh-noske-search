// This file is auto-generated by @hey-api/openapi-ts

export const $_corp_info = {
    type: 'object',
    properties: {
        wposlist: {
            description: 'A list of WPOS (`Word Part Of Speech`). Presented as a pair of WPOS names and regular expression matching the WPOS tags.',
            type: 'array',
            items: {
                type: 'array',
                items: {
                    type: 'string',
                    example: '["adjective","J.*"]',
                    description: 'At [tagsets](https://www.sketchengine.eu/tagsets/) you can find the meaning of used POS tags for 55 languages. Make sure you select the correct language.'
                }
            }
        },
        lposlist: {
            description: 'A list of LPOS (`Lemma Part Of Speech`). Presented as a pair of LPOS names and LPOS tags. Used in Concordance forms.',
            type: 'array',
            items: {
                type: 'array',
                items: {
                    type: 'string',
                    example: '["adjective","-j"]',
                    description: 'Other examples can be [ "adverb", "-a" ], [ "conjunction", "-c" ], [ "noun", "-n" ] etc. To see all pairs of LPOSLIST you execute the endpoint via the `Try it Out button`.'
                }
            }
        },
        wsposlist: {
            description: 'Has the same format as LPOSLIST but WSPOSLIST is used in Word Sketch and Thesaurus forms.',
            type: 'array',
            items: {
                type: 'array',
                items: {
                    type: 'string',
                    example: '["adjective","-j"]',
                    description: "Same as in LPOSLIST. To see all pairs of WSPOSLIST you execute the endpoint via the `Try it Out button`.'"
                }
            }
        },
        attributes: {
            description: 'A list of objects containing detailed information about attributes occuring in specified corpora.',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        example: 'lempos_lc',
                        description: 'Name of attribute. Lempos_lc = Lemma part of speech lowercase.'
                    },
                    id_range: {
                        type: 'integer',
                        example: 524493,
                        description: 'The number of attributes of the given name in the corpus. Each is counted only once even if it appears in corpus many times.'
                    },
                    label: {
                        type: 'string',
                        example: 'lempos(lowercase)',
                        description: 'An extra description.'
                    },
                    dynamic: {
                        type: 'string',
                        example: 'utf8lowercase',
                        description: 'Represents the rule according which the attribute should be derived from the original attribute. The attribute `lempos_lc` is derived from `lempos` to save disk space etc. [Read more](https://www.sketchengine.eu/documentation/corpus-configuration-file-all-features/#Dynamicattributes).'
                    },
                    fromattr: {
                        type: 'string',
                        example: 'lempos',
                        description: 'A name of attribute this attribute is derived from. Empty string if the attribute is not derived from any.'
                    }
                }
            }
        },
        structs: {
            description: 'A list of structures in the corpus.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        name: {
            type: 'string',
            example: 'British National Corpus (BNC)',
            description: 'The full name of the corpus.'
        },
        lang: {
            type: 'string',
            example: 'English',
            description: 'The language of the corpus.'
        },
        infohref: {
            type: 'string',
            example: 'https://www.sketchengine.eu/british-national-corpus/',
            description: 'An URL with more information about the corpus. Empty string if none.'
        },
        info: {
            type: 'string',
            example: 'A balanced English corpus of samples of a written and spoken language of British English from the later part of the 20th century (1969â€“1994). The spoken part is accompanied by audio recordings.',
            description: 'More information about the corpus.'
        },
        encoding: {
            type: 'string',
            example: 'UTF-8',
            description: 'The used character encoding in the corpus.'
        },
        tagsetdoc: {
            type: 'string',
            example: 'https://www.sketchengine.eu/english-treetagger-pipeline-2/',
            description: 'An URL with more information about the POS tagger used in the corpus. Information like meanings of POS tags, comparition with other tagsets for specified language etc.'
        },
        defaultattr: {
            type: 'string',
            example: 'lc',
            description: 'The default attribute for the corpus. Usually `word` or `lc`.'
        },
        starattr: {
            type: 'string'
        },
        unicameral: {
            type: 'boolean',
            example: false,
            description: 'A boolean value indicating if the corpus is unicameral (not distinguishing between upper and lower case).'
        },
        righttoleft: {
            type: 'boolean',
            example: false,
            description: 'The order of writing in language of the used corpus.'
        },
        errsetdoc: {
            type: 'string'
        },
        wsattr: {
            type: 'string',
            example: 'lempos_lc',
            description: 'The attribute name for which word sketches are computed, e.g. `lempos`.'
        },
        wsdef: {
            type: 'string',
            example: '/corpora/wsdef/english-penn_tt-3.1.wsdef.m4',
            description: 'A path to the `used` word sketches grammar definition file.'
        },
        termdef: {
            type: 'string',
            example: '/corpora/wsdef/english-penn_tt-terms-3.1.termdef.m4',
            description: 'A path to the term grammar definition file used in the corpus.'
        },
        diachronic: {
            description: 'A list of diachronic subcorporas. Diachronic corpus is corpus with timestamps to watch development of the language in time.',
            type: 'array',
            items: {
                type: 'string',
                example: 'bncdoc.year'
            }
        },
        aligned: {
            description: 'A list of aligned corpora names. `Example used here is from different corpus because BNC corpus is not parallel.`',
            type: 'array',
            items: {
                type: 'array',
                items: {
                    type: 'string',
                    example: 'a_czech',
                    description: 'Just the corpname of the aligned corpora. Parallel corpora support just two languages (corpora).'
                }
            }
        },
        aligned_details: {
            description: 'Is shown only if the specified corpus is parallel. A list of dictionaries containing detailed information about each aligned subcorpus.',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        example: 'Example_1',
                        description: 'The name of the aligned corpus.'
                    },
                    language_name: {
                        type: 'string',
                        example: 'Czech',
                        description: 'The language of the aligned corpus.'
                    },
                    Wposlist: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                n: {
                                    type: 'string',
                                    example: 'noun',
                                    description: 'The name of the part of speech category'
                                },
                                v: {
                                    type: 'string',
                                    example: 'k1.*',
                                    description: 'A regex matching the category'
                                }
                            }
                        }
                    },
                    Lposlist: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                n: {
                                    type: 'string',
                                    example: 'noun',
                                    description: 'Name of part of speech category'
                                },
                                v: {
                                    type: 'string',
                                    example: '-n',
                                    description: 'The shortcut for better representation of a speech category.'
                                }
                            }
                        }
                    },
                    has_case: {
                        type: 'boolean',
                        description: 'Represent if the language of aligned corpus differentiates between upper case and lower case.'
                    },
                    has_lemma: {
                        type: 'boolean',
                        description: 'Represent if the language of aligned corpus has lemma of not.'
                    },
                    tagsetdoc: {
                        type: 'string',
                        example: 'https://www.sketchengine.eu/tagset-reference-for-czech',
                        description: 'URL with closer information.'
                    }
                }
            }
        },
        freqttattrs: {
            description: 'A list of attributes (text types) that will be used for Frequency. Text types are metadata attached to the corpus structures. You can access it via Sketch Engine dashboard -> Corpus Info -> Text Type Analysis.',
            type: 'array',
            items: {
                type: 'string',
                example: '["bncdoc.alltyp", "bncdoc.alltim", "bncdoc.author", "bncdoc.wripp", "bncdoc.sporeg", "bncdoc.scgdom", "bncdoc.wridom", "bncdoc.spolog", "event.desc", "bncdoc.wrimed", "bncdoc.year", "bncdoc.genre"]'
            }
        },
        subcorpattrs: {
            description: 'A list of subcorpus attributes for the corpus.',
            type: 'array',
            items: {
                type: 'string',
                example: '["bncdoc.alltyp", "bncdoc.alltim", "bncdoc.author", "bncdoc.wripp", "bncdoc.sporeg", "bncdoc.scgdom", "bncdoc.wridom", "bncdoc.spolog", "event.desc", "bncdoc.wrimed", "bncdoc.year", "bncdoc.genre"]'
            }
        },
        shortref: {
            type: 'string',
            example: '=bncdoc.alltyp',
            description: 'The attribute of a structure to display as a default reference in the left-hand column of a concordance. The syntax is like `=structure.attribute`, e.g. `=doc.id` for displaying only the value of `doc.id`.'
        },
        docstructure: {
            type: 'string',
            example: 'bncdoc',
            description: 'A structures that is considered as individual documents. Usually `doc`.'
        },
        newversion: {
            type: 'string',
            example: '',
            description: 'Information about the new version of the corpus, if available. Empty string if not.'
        },
        structures: {
            description: 'A list of structures appearing in corpus.',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        example: 'head',
                        description: 'The name of the structure.'
                    },
                    label: {
                        type: 'string',
                        description: 'Just some extra information. Empty string if none.'
                    },
                    attributes: {
                        description: 'More detailed information.',
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    example: 'rend',
                                    description: 'Name of attribute.'
                                },
                                label: {
                                    type: 'string',
                                    example: '',
                                    description: 'An extra information about attribute. Empty string if none.'
                                },
                                dynamic: {
                                    type: 'string',
                                    description: 'Dynamic (derived) attribute. Empty string if none. [Read more](https://www.sketchengine.eu/documentation/corpus-configuration-file-all-features/#Dynamicattributes)'
                                },
                                fromattr: {
                                    type: 'string',
                                    description: 'A name of attribute this attribute is derived from. Empty string if none.'
                                },
                                size: {
                                    type: 'integer',
                                    example: 5,
                                    description: 'Number of occurences.'
                                }
                            }
                        }
                    },
                    size: {
                        type: 'integer',
                        example: 14868944,
                        description: 'Number of occurences of `head` structure in this case.'
                    }
                }
            }
        },
        is_error_corpus: {
            type: 'boolean',
            example: false,
            description: 'A boolean value indicating if the corpus is an error corpus (not compiled etc.).'
        },
        structctx: {
            type: 'string',
            example: '',
            description: 'The structural context for the corpus. Empty string if none.'
        },
        deffilerlink: {
            type: 'boolean',
            example: false,
            description: 'A boolean value indicating if the default filter link is enabled.'
        },
        defaultstructs: {
            description: 'A list of default structures for the corpus.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        wsttattrs: {
            type: 'string',
            description: 'The text types for which the word highlights [Read more](https://www.sketchengine.eu/find-x-word-highlights/) are computed.'
        },
        terms_compiled: {
            type: 'boolean',
            example: true,
            description: 'A boolean value indicating if the terms file is compiled.'
        },
        compiled: {
            type: 'string',
            example: '06/30/2017 07:34:25',
            description: 'A date of compilation in format `mm/dd/yyyy hh:mm:ss`.'
        },
        gramrels: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        sizes: {
            type: 'object',
            properties: {
                tokencount: {
                    type: 'string',
                    example: '112345722'
                },
                wordcount: {
                    type: 'string',
                    example: '96134547'
                },
                doccount: {
                    type: 'string',
                    example: '4054',
                    description: 'Document counter.'
                },
                parcount: {
                    type: 'string',
                    example: '1514906',
                    description: 'Paragraph counter.'
                },
                sentcount: {
                    type: 'string',
                    example: '6052190',
                    description: 'Sentences counter.'
                },
                normsum: {
                    type: 'string',
                    example: '96134547',
                    description: 'Wordcount after normalization.'
                }
            }
        },
        alsizes: {
            description: 'A list of tuples containing sizes of aligned corpora.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        registry_dump: {
            type: 'string',
            description: 'The registry dump for the corpus (detailed information about corpus setting), if the registry parameter is set.'
        },
        registry_text: {
            type: 'string',
            description: 'The registry text for the corpus (detailed information about corpus setting), if the registry parameter is set.'
        },
        subcorpora: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    n: {
                        type: 'string',
                        example: 'Test',
                        description: 'A name of subcorpus.'
                    },
                    name: {
                        type: 'string',
                        example: 'Test',
                        description: 'A name of subcorpus.'
                    },
                    user: {
                        type: 'integer',
                        example: 1,
                        description: 'Represent if subcorpora is created by user or not.'
                    },
                    tokens: {
                        type: 'integer',
                        example: 271454,
                        description: 'Number of tokens in subcorpus.'
                    },
                    relsize: {
                        type: 'number',
                        example: 0.24162379765559744,
                        description: 'The percentage of subcorpus size from total corpus size.'
                    },
                    words: {
                        type: 'integer',
                        example: 232283,
                        description: 'Number of words in subcorpus.'
                    },
                    struct: {
                        type: 'string',
                        example: 's'
                    },
                    query: {
                        type: 'string',
                        example: 'Q:q[lc="dog" | lemma_lc="dog"]'
                    }
                }
            }
        },
        api_version: {
            type: 'string',
            example: '5.62.3',
            description: 'Current API version.'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.219.2',
            description: 'Current version of Manatee.'
        },
        request: {
            description: 'Just summary section of parsed query parameters used in this endpoint call. These parameters are all documented in the beggining of every endpoint box (after you unwrap the endpoint).',
            type: 'object',
            properties: {
                subcorpora: {
                    type: 'string',
                    example: '1'
                },
                struct_attr_stats: {
                    type: 'string',
                    example: '1'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                }
            }
        }
    }
} as const;

export const $_wordlist = {
    type: 'object',
    properties: {
        new_maxitems: {
            type: 'integer',
            example: 20000
        },
        wllimit: {
            type: 'integer',
            example: 1000,
            description: 'Word list limit, amount of words to be display.'
        },
        lastpage: {
            type: 'integer',
            example: 0
        },
        note: {
            type: 'string',
            example: 'You are allowed to see only 1000 items.',
            description: 'An additional note to displayed results.'
        },
        total: {
            type: 'integer',
            example: 165953,
            description: 'Number if displayed items (word - frequency).'
        },
        totalfrq: {
            type: 'integer',
            example: 111680004,
            description: 'Sum of all frequencies.'
        },
        items: {
            description: 'A result list.',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    str: {
                        type: 'string',
                        example: 'the',
                        description: 'The word to which the frequency has been calculated.'
                    },
                    frq: {
                        type: 'integer',
                        example: 6054939,
                        description: 'The word frequency.'
                    },
                    relfreq: {
                        type: 'number',
                        example: 53895.59026,
                        description: 'The relative word frequency. Relative frequency is a way of expressing how often something happens compared to other events or items in a given group.'
                    }
                }
            }
        },
        wlattr_label: {
            type: 'string',
            example: 'word(lowercase)'
        },
        frtp: {
            type: 'string',
            example: 'frequency',
            description: 'Frequency type. Other possible values can be `average reduced frequency`, `document frequency`, `score`.'
        },
        api_version: {
            type: 'string',
            example: '5.62.3'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.219.2'
        },
        request: {
            description: 'Just summary section of parsed query parameters used in this endpoint call. These parameters are all documented in the beggining of every endpoint box.',
            type: 'object',
            properties: {
                wlminfreq: {
                    type: 'string',
                    example: '5'
                },
                random: {
                    type: 'string',
                    example: '0'
                },
                include_nonwords: {
                    type: 'string',
                    example: '1'
                },
                wltype: {
                    type: 'string',
                    example: 'simple'
                },
                wlmaxitems: {
                    type: 'string',
                    example: '20000'
                },
                wlsort: {
                    type: 'string',
                    example: 'frq'
                },
                wlicase: {
                    type: 'string',
                    example: '1'
                },
                wlpage: {
                    type: 'string',
                    example: '1'
                },
                reldocf: {
                    type: 'string',
                    example: '1'
                },
                wlpat: {
                    type: 'string',
                    example: '.*'
                },
                relfreq: {
                    type: 'string',
                    example: '1'
                },
                wlattr: {
                    type: 'string',
                    example: 'lc'
                },
                wlmaxfreq: {
                    type: 'string',
                    example: '0'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                }
            }
        }
    }
} as const;

export const $_concordance = {
    type: 'object',
    properties: {
        Lines: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    toknum: {
                        type: 'integer',
                        example: 10336
                    },
                    hitlen: {
                        type: 'integer',
                        example: 1
                    },
                    Refs: {
                        type: 'array',
                        items: {
                            type: 'string',
                            example: 'Written books and periodicals'
                        }
                    },
                    Tbl_refs: {
                        type: 'array',
                        items: {
                            type: 'string',
                            example: 'Written books and periodicals'
                        }
                    },
                    Left: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                strc: {
                                    type: 'string',
                                    example: '<s>'
                                }
                            }
                        }
                    },
                    Kwic: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                str: {
                                    type: 'string',
                                    example: 'dogs'
                                },
                                coll: {
                                    type: 'integer',
                                    example: 1
                                }
                            }
                        }
                    },
                    Right: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                str: {
                                    type: 'string',
                                    example: '</s>'
                                }
                            }
                        }
                    },
                    Links: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    linegroup: {
                        type: 'string',
                        example: '_'
                    },
                    linegroup_id: {
                        type: 'integer',
                        example: 0
                    }
                }
            }
        },
        fromp: {
            type: 'integer',
            example: 1
        },
        concsize: {
            type: 'integer',
            example: 12087
        },
        concordance_size_limit: {
            type: 'integer',
            example: 10000
        },
        Sort_idx: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        righttoleft: {
            type: 'boolean',
            example: false
        },
        Aligned_rtl: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        numofcolls: {
            type: 'integer',
            example: 0
        },
        finished: {
            type: 'integer',
            example: 1
        },
        fullsize: {
            type: 'integer',
            example: 12087
        },
        relsize: {
            type: 'number',
            example: 107.59
        },
        q: {
            type: 'array',
            items: {
                type: 'string',
                example: 'q[lc=\"dog\" | lemma_lc=\"dog\"]'
            }
        },
        Desc: {
            type: 'object',
            properties: {
                op: {
                    type: 'string',
                    example: 'Query'
                },
                arg: {
                    type: 'string',
                    example: '[lc=\"dog\" | lemma_lc=\"dog\"]'
                },
                nicearg: {
                    type: 'string',
                    example: 'dog'
                },
                rel: {
                    type: 'number',
                    example: 107.59
                },
                size: {
                    type: 'integer',
                    example: 12087
                },
                tourl: {
                    type: 'string',
                    example: 'q=q%5Blc%3D%22dog%22+%7C+lemma_lc%3D%22dog%22%5D'
                }
            }
        },
        port: {
            type: 'integer',
            example: 0
        },
        gdex_scores: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        sc_strcts: {
            type: 'array',
            items: {
                type: 'array',
                items: {
                    type: 'string',
                    example: 'bncdoc'
                }
            }
        },
        api_version: {
            type: 'string',
            example: '5.63.1'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.221'
        },
        request: {
            type: 'object',
            properties: {
                concordance_query: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            queryselector: {
                                type: 'string',
                                example: 'iqueryrow'
                            },
                            iquery: {
                                type: 'string',
                                example: 'dog'
                            }
                        }
                    }
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                },
                kwicleftctx: {
                    type: 'string',
                    example: '100#'
                },
                structs: {
                    type: 'string',
                    example: 's,g'
                },
                viewmode: {
                    type: 'string',
                    example: 'sen'
                },
                attr_allpos: {
                    type: 'string',
                    example: 'all'
                },
                fromp: {
                    type: 'string',
                    example: '1'
                },
                json: {
                    type: 'string',
                    example: '{\"concordance_query\":[{\"queryselector\":\"iqueryrow\",\"iquery\":\"dog\"}]}'
                },
                kwicrightctx: {
                    type: 'string',
                    example: '100#'
                },
                refs: {
                    type: 'string',
                    example: '=bncdoc.alltyp'
                },
                cup_hl: {
                    type: 'string',
                    example: 'q'
                },
                attrs: {
                    type: 'string',
                    example: 'word'
                },
                pagesize: {
                    type: 'string',
                    example: '20'
                }
            }
        }
    }
} as const;

export const $_subcorp = {
    type: 'object',
    properties: {
        subcname: {
            type: 'string',
            example: 'Australian domain .au'
        },
        SubcorpList: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    n: {
                        type: 'string',
                        example: 'Australian domain .au'
                    },
                    name: {
                        type: 'string',
                        example: 'Australian domain .au'
                    },
                    user: {
                        type: 'integer',
                        example: 0
                    }
                }
            }
        },
        api_version: {
            type: 'string',
            example: '5.63.1'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.221'
        },
        request: {
            type: 'object',
            properties: {
                corpname: {
                    type: 'string',
                    example: 'preloaded/ententen13_tt2_1'
                }
            }
        }
    }
} as const;

export const $_extract_keywords = {
    type: 'object',
    properties: {
        keywords: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    item: {
                        type: 'string',
                        example: 'galskÃ½'
                    },
                    score: {
                        type: 'number',
                        example: 2411.16
                    },
                    frq1: {
                        type: 'integer',
                        example: 2
                    },
                    frq2: {
                        type: 'integer',
                        example: 512
                    },
                    rel_frq1: {
                        type: 'number',
                        example: 4291.8457
                    },
                    rel_frq2: {
                        type: 'number',
                        example: 0.78041
                    },
                    query: {
                        type: 'string',
                        example: '[lemma=\"galskÃ½\"]'
                    }
                }
            }
        },
        referece_corpus_name: {
            type: 'string',
            example: 'Slovak Web 2011 (skTenTen11)'
        },
        reference_corpus_size: {
            type: 'integer',
            example: 656067998
        },
        reference_subcorpus_size: {
            type: 'integer',
            example: 656067998
        },
        subcorpus_size: {
            type: 'integer',
            example: 466
        },
        corpus_size: {
            type: 'integer',
            example: 466
        },
        total: {
            type: 'integer',
            example: 175
        },
        totalfrq1: {
            type: 'integer',
            example: 466
        },
        totalfrq2: {
            type: 'integer',
            example: 250525622
        },
        wllimit: {
            type: 'integer',
            example: 1000
        },
        note: {
            type: 'string',
            example: ''
        },
        api_version: {
            type: 'string',
            example: '5.63.1'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.221'
        },
        request: {
            type: 'object',
            properties: {
                alnum: {
                    type: 'string',
                    example: '1'
                },
                maxfreq: {
                    type: 'string',
                    example: '0'
                },
                minfreq: {
                    type: 'string',
                    example: '1'
                },
                wlpat: {
                    type: 'string',
                    example: '.*'
                },
                attr: {
                    type: 'string',
                    example: 'lemma'
                },
                keywords: {
                    type: 'string',
                    example: '1'
                },
                ref_corpname: {
                    type: 'string',
                    example: 'preloaded/sktenten11_rft1'
                },
                simple_n: {
                    type: 'string',
                    example: '1'
                },
                k_attr: {
                    type: 'string',
                    example: 'lemma'
                },
                include_nonwords: {
                    type: 'string',
                    example: '0'
                },
                reldocf: {
                    type: 'string',
                    example: ':"0"'
                },
                icase: {
                    type: 'string',
                    example: '1'
                },
                onealpha: {
                    type: 'string',
                    example: '1'
                },
                max_keywords: {
                    type: 'string',
                    example: '1000'
                },
                corpname: {
                    type: 'string',
                    example: 'user/matuskostka1/aaaaa_slovak'
                }
            }
        }
    }
} as const;

export const $_attr_vals = {
    type: 'object',
    properties: {
        query: {
            type: 'string',
            example: '.*',
            description: 'The regular expression from query parameter `avpat`.'
        },
        suggestions: {
            type: 'array',
            items: {
                type: 'string',
                example: '[ "Cookson, Neil Andrew", â€¦ ]'
            },
            description: 'Suggestions for avattr `bncdoc.author`.'
        },
        no_more_values: {
            type: 'boolean',
            example: false,
            description: 'Represent if the `suggestion` list is complete.'
        },
        api_version: {
            type: 'string',
            example: '5.63.1'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.221'
        },
        request: {
            type: 'object',
            properties: {
                avpat: {
                    type: 'string',
                    example: '.*'
                },
                avmaxitems: {
                    type: 'string',
                    example: '15'
                },
                ajax: {
                    type: 'string',
                    example: '1'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                },
                avfrom: {
                    type: 'string',
                    example: '0'
                },
                icase: {
                    type: 'string',
                    example: '1'
                },
                avattr: {
                    type: 'string',
                    example: 'bncdoc.author'
                }
            }
        }
    }
} as const;

export const $_collx = {
    type: 'object',
    properties: {
        Head: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    n: {
                        type: 'string',
                        example: 'Cooccurrence count'
                    },
                    s: {
                        type: 'string',
                        example: 'f'
                    },
                    style: {
                        type: 'string',
                        example: ' style="word-wrap: break-word; width: 5em;"'
                    }
                }
            }
        },
        Items: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    str: {
                        type: 'string',
                        example: 'Belvin'
                    },
                    freq: {
                        type: 'integer',
                        example: 7
                    },
                    coll_freq: {
                        type: 'integer',
                        example: 5
                    },
                    Stats: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                s: {
                                    type: 'string',
                                    example: '2.64537'
                                },
                                n: {
                                    type: 'string',
                                    example: 't'
                                }
                            }
                        }
                    },
                    pfilter: {
                        type: 'string',
                        example: 'q=P-5+5+1+%5Bword%3D%22Belvin%22%5D'
                    },
                    nfilter: {
                        type: 'string',
                        example: 'q=N-5+5+1+%5Bword%3D%22Belvin%22%5D'
                    }
                }
            }
        },
        lastpage: {
            type: 'integer',
            example: 0
        },
        wllimit: {
            type: 'integer',
            example: 1000
        },
        concsize: {
            type: 'integer',
            example: 22685
        },
        Desc: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    op: {
                        type: 'string',
                        example: 'Query'
                    },
                    arg: {
                        type: 'string',
                        example: '[lemma="test"]'
                    },
                    nicearg: {
                        type: 'string',
                        example: 'test'
                    },
                    rel: {
                        type: 'number',
                        example: 202.22
                    },
                    size: {
                        type: 'integer',
                        example: 22685
                    },
                    tourl: {
                        type: 'string',
                        example: 'q=q%5Blemma%3D%22test%22%5D'
                    }
                }
            }
        },
        api_version: {
            type: 'string',
            example: '5.63.1'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.223.6'
        },
        request: {
            description: 'Just summary section of parsed query parameters used in this endpoint call. These parameters are all documented in the beggining of every endpoint box (after you unwrap the endpoint).',
            type: 'object',
            properties: {
                csortfn: {
                    type: 'string',
                    example: 'm'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2'
                },
                q: {
                    type: 'string',
                    example: 'q[lemma="test"]'
                }
            }
        }
    }
} as const;

export const $_freqml = {
    type: 'object',
    properties: {
        fcrit: {
            type: 'string',
            example: 'fcrit=word%2Fe+-1%3C0+lemma%2Fe+-1%3C0'
        },
        FCrit: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    fcrit: {
                        type: 'string',
                        example: 'word/e -1<0 lemma/e -1<0'
                    }
                }
            }
        },
        Blocks: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    Head: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                n: {
                                    type: 'string',
                                    example: 'word'
                                },
                                s: {
                                    type: 'integer',
                                    example: 0
                                },
                                id: {
                                    type: 'string',
                                    example: 'word/e'
                                }
                            }
                        }
                    },
                    total: {
                        type: 'integer',
                        example: 1700
                    },
                    totalfrq: {
                        type: 'integer',
                        example: 12087
                    },
                    Items: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                Word: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            n: {
                                                type: 'string',
                                                example: 'the'
                                            }
                                        }
                                    }
                                },
                                frq: {
                                    type: 'integer',
                                    example: 2621
                                },
                                rel: {
                                    type: 'integer',
                                    example: 0
                                },
                                reltt: {
                                    type: 'integer',
                                    example: 0
                                },
                                norm: {
                                    type: 'integer',
                                    example: 0
                                },
                                fbar: {
                                    type: 'integer',
                                    example: 301
                                },
                                relbar: {
                                    type: 'integer',
                                    example: 0
                                },
                                freqbar: {
                                    type: 'integer',
                                    example: 0
                                },
                                pfilter: {
                                    type: 'string',
                                    example: ';q=p-1%3C0+-1%3C0+0+%5Bword%3D%22the%22%5D;q=p-1%3C0+-1%3C0+0+%5Blemma%3D%22the%22%5D'
                                },
                                nfilter: {
                                    type: 'string'
                                },
                                pfilter_list: {
                                    type: 'array',
                                    items: {
                                        type: 'array',
                                        items: {
                                            type: 'string',
                                            example: 'p-1<0 -1<0 0 [word="the"]'
                                        }
                                    }
                                },
                                poc: {
                                    type: 'number',
                                    example: 21.684454372466284
                                },
                                fpm: {
                                    type: 'number',
                                    example: 23.329771292938062
                                }
                            }
                        }
                    }
                }
            }
        },
        paging: {
            type: 'integer',
            example: 1
        },
        concsize: {
            type: 'integer',
            example: 12087
        },
        fullsize: {
            type: 'integer',
            example: 14297
        },
        Desc: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    op: {
                        type: 'string',
                        example: 'Query'
                    },
                    arg: {
                        type: 'string',
                        example: '[lc="dog" | lemma_lc="dog"]'
                    },
                    nicearg: {
                        type: 'string',
                        example: 'dog'
                    },
                    rel: {
                        type: 'number',
                        example: 107.59
                    },
                    size: {
                        type: 'integer',
                        example: 12087
                    },
                    tourl: {
                        type: 'string',
                        example: 'q=q%5Blc%3D%22dog%22+%7C+lemma_lc%3D%22dog%22%5D'
                    }
                }
            }
        },
        numofcolls: {
            type: 'integer',
            example: 0
        },
        hitlen: {
            type: 'integer',
            example: 1
        },
        wllimit: {
            type: 'integer',
            example: 1000
        },
        lastpage: {
            type: 'integer',
            example: 0
        },
        ml: {
            type: 'boolean',
            example: true
        },
        api_version: {
            type: 'string',
            example: '5.63.12'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.223.6'
        },
        request: {
            description: 'Just summary section of parsed query parameters used in this endpoint call. These parameters are all documented in the beggining of every endpoint box.',
            type: 'object',
            properties: {
                concordance_query: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            queryselector: {
                                type: 'string',
                                example: 'iqueryrow'
                            },
                            iquery: {
                                type: 'string',
                                example: 'dog'
                            }
                        }
                    }
                },
                format: {
                    type: 'string',
                    example: 'json'
                },
                fpage: {
                    type: 'string',
                    example: '1'
                },
                showpoc: {
                    type: 'string',
                    example: '1'
                },
                freqlevel: {
                    type: 'string',
                    example: '2'
                },
                group: {
                    type: 'string',
                    example: '1'
                },
                freq_sort: {
                    type: 'string',
                    example: 'freq'
                },
                ml1ctx: {
                    type: 'string',
                    example: '-1<0'
                },
                showreltt: {
                    type: 'string',
                    example: '1'
                },
                ml2attr: {
                    type: 'string',
                    example: 'lemma'
                },
                ml1attr: {
                    type: 'string',
                    example: 'word'
                },
                ml2ctx: {
                    type: 'string',
                    example: '-1<0'
                },
                fmaxitems: {
                    type: 'string',
                    example: '5000'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                },
                showrel: {
                    type: 'string',
                    example: '1'
                }
            }
        }
    }
} as const;

export const $_struct_wordlist = {
    type: 'object',
    properties: {
        fcrit: {
            type: 'string',
            example: 'fcrit=lemma%2Fe+0+word%2Fe+0+lempos%2Fe+0'
        },
        FCrit: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    fcrit: {
                        type: 'string',
                        example: 'lemma/e 0 word/e 0 lempos/e 0'
                    }
                }
            }
        },
        Blocks: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    Head: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                n: {
                                    type: 'string',
                                    example: 'lemma'
                                },
                                s: {
                                    type: 'integer',
                                    example: 0
                                },
                                id: {
                                    type: 'string',
                                    example: 'lemma/e'
                                }
                            }
                        }
                    },
                    total: {
                        type: 'integer',
                        example: 77
                    },
                    totalfrq: {
                        type: 'integer',
                        example: 13931
                    },
                    Items: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                Word: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            n: {
                                                type: 'string',
                                                example: 'dog'
                                            }
                                        }
                                    }
                                },
                                frq: {
                                    type: 'integer',
                                    example: 6829
                                },
                                rel: {
                                    type: 'integer',
                                    example: 0
                                },
                                reltt: {
                                    type: 'integer',
                                    example: 0
                                },
                                norm: {
                                    type: 'integer',
                                    example: 0
                                },
                                fbar: {
                                    type: 'integer',
                                    example: 301
                                },
                                relbar: {
                                    type: 'integer',
                                    example: 0
                                },
                                freqbar: {
                                    type: 'integer',
                                    example: 0
                                },
                                pfilter: {
                                    type: 'string',
                                    example: ';q=p0+0+0+%5Blemma%3D%22dog%22%5D;q=p0+0+0+%5Bword%3D%22dog%22%5D;q=p0+0+0+%5Blempos%3D%22dog-n%22%5D'
                                },
                                nfilter: {
                                    type: 'string'
                                },
                                pfilter_list: {
                                    type: 'array',
                                    items: {
                                        type: 'array',
                                        items: {
                                            type: 'string',
                                            example: 'p0 0 0 [lemma="dog"]'
                                        }
                                    }
                                },
                                poc: {
                                    type: 'number',
                                    example: 47.765265440302166
                                },
                                fpm: {
                                    type: 'number',
                                    example: 60.78558113676994
                                }
                            }
                        }
                    }
                }
            }
        },
        paging: {
            type: 'integer',
            example: 1
        },
        concsize: {
            type: 'integer',
            example: 14297
        },
        fullsize: {
            type: 'integer',
            example: 14297
        },
        Desc: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    op: {
                        type: 'string',
                        example: 'Query'
                    },
                    arg: {
                        type: 'string',
                        example: '[lemma_lc="(dog.*)"]'
                    },
                    nicearg: {
                        type: 'string',
                        example: '(dog.*)'
                    },
                    rel: {
                        type: 'number',
                        example: 127.26
                    },
                    size: {
                        type: 'integer',
                        example: 14297
                    },
                    tourl: {
                        type: 'string',
                        example: 'q=q%5Blemma_lc%3D%22%28dog.%2A%29%22%5D'
                    }
                }
            }
        },
        numofcolls: {
            type: 'integer',
            example: 0
        },
        hitlen: {
            type: 'integer',
            example: 1
        },
        wllimit: {
            type: 'integer',
            example: 1000
        },
        lastpage: {
            type: 'integer',
            example: 1
        },
        ml: {
            type: 'boolean',
            example: true
        },
        api_version: {
            type: 'string',
            example: '5.63.12'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.223.6'
        },
        request: {
            description: 'Just summary section of parsed query parameters used in this endpoint call. These parameters are all documented in the beggining of every endpoint box.',
            type: 'object',
            properties: {
                wlmaxfreq: {
                    type: 'string',
                    example: '0'
                },
                wlpage: {
                    type: 'string',
                    example: '1'
                },
                random: {
                    type: 'string',
                    example: '0'
                },
                wlstruct_attr1: {
                    type: 'string',
                    example: 'lemma'
                },
                wltype: {
                    type: 'string',
                    example: 'struct_wordlist'
                },
                fmaxitems: {
                    type: 'string',
                    example: '20000'
                },
                wlpat: {
                    type: 'string',
                    example: '(dog.*)'
                },
                wlnums: {
                    type: 'string',
                    example: 'frq'
                },
                wlattr: {
                    type: 'string',
                    example: 'lemma_lc'
                },
                wlicase: {
                    type: 'string',
                    example: '1'
                },
                wlmaxitems: {
                    type: 'string',
                    example: '20000'
                },
                wlstruct_attr3: {
                    type: 'string',
                    example: 'lempos'
                },
                relfreq: {
                    type: 'string',
                    example: '1'
                },
                include_nonwords: {
                    type: 'string',
                    example: '1'
                },
                wlsort: {
                    type: 'string',
                    example: 'frq'
                },
                wlstruct_attr2: {
                    type: 'string',
                    example: 'word'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                },
                reldocf: {
                    type: 'string',
                    example: '1'
                },
                wlminfreq: {
                    type: 'string',
                    example: '5'
                }
            }
        }
    }
} as const;

export const $_freq_distrib = {
    type: 'object',
    properties: {
        dots: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    frq: {
                        type: 'integer',
                        example: 64,
                        description: ''
                    },
                    pos: {
                        type: 'integer',
                        example: 0,
                        description: ''
                    },
                    beg: {
                        type: 'integer',
                        example: 72053,
                        description: ''
                    },
                    end: {
                        type: 'integer',
                        example: 2475660,
                        description: ''
                    }
                }
            }
        },
        granularity: {
            type: 'integer',
            example: 50,
            description: ''
        },
        api_version: {
            type: 'string',
            example: '5.63.12'
        },
        manatee_version: {
            type: 'string',
            example: '2.36-7-SkE-2.223.6'
        },
        request: {
            type: 'object',
            properties: {
                concordance_query: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            queryselector: {
                                type: 'string',
                                example: 'lemmarow'
                            },
                            lemma: {
                                type: 'string',
                                example: 'cat'
                            },
                            lpos: {
                                type: 'string',
                                example: '-n'
                            },
                            qmcase: {
                                type: 'integer',
                                example: 0
                            }
                        }
                    }
                },
                structs: {
                    type: 'string',
                    example: 's,g'
                },
                fc_lemword_type: {
                    type: 'string',
                    example: 'all'
                },
                attrs: {
                    type: 'string',
                    example: 'word'
                },
                json: {
                    type: 'string',
                    example: '{"concordance_query":[{"queryselector":"lemmarow","lemma":"cat","lpos":"-n","qmcase":false}]}'
                },
                res: {
                    type: 'string',
                    example: '50'
                },
                fc_lemword_window_type: {
                    type: 'string',
                    example: 'both'
                },
                normalize: {
                    type: 'string',
                    example: '0'
                },
                format: {
                    type: 'string',
                    example: 'json'
                },
                attr_allpos: {
                    type: 'string',
                    example: 'all'
                },
                fc_pos_type: {
                    type: 'string',
                    example: 'all'
                },
                fc_pos_wsize: {
                    type: 'string',
                    example: '5'
                },
                refs: {
                    type: 'string',
                    example: '=bncdoc.alltyp'
                },
                viewmode: {
                    type: 'string',
                    example: 'sen'
                },
                lpos: {
                    type: 'string',
                    example: '-n'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                },
                default_attr: {
                    type: 'string',
                    example: 'lemma'
                },
                fc_lemword_wsize: {
                    type: 'string',
                    example: '5'
                },
                fc_pos_window_type: {
                    type: 'string',
                    example: 'both'
                }
            }
        }
    }
} as const;

export const $_fullref = {
    type: 'object',
    properties: {
        Refs: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        example: 'Token number'
                    },
                    id: {
                        type: 'string',
                        example: '#'
                    },
                    val: {
                        type: 'string',
                        example: '6270887'
                    }
                }
            }
        },
        bncdoc_id: {
            type: 'string',
            example: 'J1C'
        },
        bncdoc_author: {
            type: 'string',
            example: '===NONE==='
        },
        bncdoc_year: {
            type: 'string',
            example: '===NONE==='
        },
        bncdoc_title: {
            type: 'string',
            example: '[Leeds United e-mail list]'
        },
        bncdoc_info: {
            type: 'string',
            example: '[Leeds United e-mail list]. Sample containing about 41810 words of unpublished miscellanea (domain: leisure)'
        },
        bncdoc_allava: {
            type: 'string',
            example: 'Ownership has not been claimed'
        },
        bncdoc_alltim: {
            type: 'string',
            example: '1985-1993'
        },
        bncdoc_alltyp: {
            type: 'string',
            example: 'Written miscellaneous'
        },
        bncdoc_genre: {
            type: 'string',
            example: 'W_email'
        },
        u_who: {
            type: 'string',
            example: ''
        },
        s_audio: {
            type: 'string',
            example: '===NONE==='
        },
        api_version: {
            type: 'string',
            example: '5.63.12'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.223.6'
        },
        request: {
            type: 'object',
            properties: {
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                },
                pos: {
                    type: 'string',
                    example: '6270887'
                }
            }
        }
    }
} as const;

export const $_textypes_with_norms = {
    type: 'object',
    properties: {
        Blocks: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    Line: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    example: 'bncdoc.alltyp'
                                },
                                label: {
                                    type: 'string',
                                    example: 'Text type'
                                },
                                attr_doc: {
                                    type: 'string',
                                    example: ''
                                },
                                attr_doc_label: {
                                    type: 'string',
                                    example: ''
                                },
                                Values: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            v: {
                                                type: 'string',
                                                example: 'Spoken context-governed'
                                            },
                                            xcnt: {
                                                type: 'integer',
                                                example: 757
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Normlist: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    n: {
                        type: 'string',
                        example: 'freq'
                    },
                    label: {
                        type: 'string',
                        example: 'Document counts'
                    }
                }
            }
        },
        api_version: {
            type: 'string',
            example: '5.63.12'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.223.6'
        },
        request: {
            type: 'object',
            properties: {
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt21'
                }
            }
        }
    }
} as const;

export const $_widectx = {
    type: 'object',
    properties: {
        wrapdetail: {
            type: 'string',
            example: '<p>'
        },
        deletewrap: {
            type: 'boolean',
            example: true
        },
        content: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    str: {
                        type: 'string',
                        example: ', in Hungarian also means "majority of", "its belongings", "its goods", "its best portion", a type of pork, and may also be incorrectly identified as an agglutination of a frequent abbreviation in mailing lists.'
                    },
                    class: {
                        type: 'string',
                        example: ''
                    }
                }
            }
        },
        leftlink: {
            type: 'string',
            example: 'pos=831745;detail_left_ctx=110;detail_right_ctx=50'
        },
        rightlink: {
            type: 'string',
            example: 'pos=831745;detail_left_ctx=50;detail_right_ctx=110'
        },
        pos: {
            type: 'integer',
            example: 831745
        },
        maxcontent: {
            type: 'integer',
            example: 200
        },
        api_version: {
            type: 'string',
            example: '5.63.12'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.223.6'
        },
        request: {
            type: 'object',
            properties: {
                detail_left_ctx: {
                    type: 'string',
                    example: '50'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/ententen21_tt31'
                },
                hitlen: {
                    type: 'string',
                    example: '1'
                },
                pos: {
                    type: 'string',
                    example: '831745'
                },
                detail_right_ctx: {
                    type: 'string',
                    example: '50'
                },
                structs: {
                    type: 'string',
                    example: 's,g'
                }
            }
        }
    }
} as const;

export const $_subcorpus_rename = {
    type: 'object',
    properties: {
        status: {
            type: 'string',
            example: 'OK'
        },
        corpus: {
            type: 'string',
            example: 'preloaded/bnc2_tt31'
        },
        subcorp_id2name: {
            type: 'object',
            properties: {
                test: {
                    type: 'string',
                    example: 'test_2'
                }
            }
        },
        api_version: {
            type: 'string',
            example: '5.66.5'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.225.6'
        },
        request: {
            type: 'object',
            properties: {
                subcorp_id: {
                    type: 'string',
                    example: 'test'
                },
                new_subcorp_name: {
                    type: 'string',
                    example: 'test_2'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt31'
                }
            }
        }
    }
} as const;

export const $_subcorp_info = {
    type: 'object',
    properties: {
        subcorp: {
            type: 'string',
            example: 'test_4'
        },
        corpsize: {
            type: 'integer',
            example: 112338376
        },
        subcsize: {
            type: 'integer',
            example: 112338376
        },
        api_version: {
            type: 'string',
            example: '5.66.5'
        },
        manatee_version: {
            type: 'string',
            example: '2.36.7-SkE-2.225.6'
        },
        request: {
            type: 'object',
            properties: {
                subcname: {
                    type: 'string',
                    example: 'test_2'
                },
                corpname: {
                    type: 'string',
                    example: 'preloaded/bnc2_tt31'
                }
            }
        }
    }
} as const;

export const $_freqdist = {
    type: 'object',
    properties: {
        lc: {
            type: 'string',
            example: 'the'
        },
        freqdist: {
            type: 'object',
            properties: {
                '2021-11': {
                    description: 'The name is variable according selected period (wlattr).',
                    type: 'object',
                    properties: {
                        frq: {
                            type: 'integer',
                            example: 679638
                        },
                        rel_frq: {
                            type: 'number',
                            format: 'float',
                            example: 3022.91023457566
                        },
                        period_size: {
                            type: 'number',
                            format: 'float',
                            example: 224829038
                        }
                    }
                }
            }
        },
        removed_freqdist: {
            type: 'object',
            properties: {
                '2023-08': {
                    description: 'The name is variable according selected period (wlattr).',
                    type: 'object',
                    properties: {
                        frq: {
                            type: 'integer',
                            example: 0
                        },
                        rel_frq: {
                            type: 'number',
                            format: 'float',
                            example: 0
                        },
                        period_size: {
                            type: 'number',
                            format: 'float',
                            example: 429451774
                        }
                    }
                }
            }
        },
        average_norm: {
            type: 'number',
            format: 'float',
            example: 136780187.25
        },
        norm_limit: {
            type: 'number',
            format: 'float',
            example: 6839009.362500001
        }
    }
} as const;

export const $_corpora_request = {
    description: 'Request for post method to set `name`, `language`, `tagset`, and additional information to the corpus.',
    type: 'object',
    properties: {
        info: {
            type: 'string',
            description: 'The additional information for a newly created corpus.',
            example: 'Example description of user corpus.'
        },
        language_id: {
            type: 'string',
            description: 'Language iso-code. `ISO 639-1`.',
            example: 'en'
        },
        name: {
            type: 'string',
            description: 'Unique `corpus name` for a newly created corpus.',
            example: 'Example corpus'
        },
        tagset_id: {
            type: 'string',
            description: 'Name of used tagset.',
            example: 'TT_ENG_V3'
        }
    }
} as const;

export const $_compile_request = {
    type: 'object',
    properties: {
        structures: {
            type: 'string',
            description: `\`Structures\` and \`structure attributes\` in corpus which should be compiled. Usually: \`all\`.`,
            example: 'all'
        }
    }
} as const;

export const $_corpus_ids = {
    type: 'object',
    properties: {
        corpus_ids: {
            type: 'array',
            items: {
                type: 'integer',
                description: 'A list of `Corpus ID` of multilingual corpora.'
            },
            example: [842464, 842463]
        }
    }
} as const;

export const $_align_req = {
    type: 'object',
    properties: {
        alignstruct: {
            type: 'string',
            description: 'According to which structure the document should be aligned. Usually, `/<s>`.',
            example: 's'
        },
        auto: {
            type: 'boolean',
            description: 'True, when documents are not compiled. Sketch Engine will align them automatically.',
            example: true
        },
        corpus_ids: {
            type: 'array',
            items: {
                type: 'integer',
                description: "A list of `Corpus ID` of multilingual corpus. ID's in example does not exist."
            },
            example: [842464, 842463]
        }
    }
} as const;

export const $_empty_request = {
    type: 'object',
    description: 'In this documentation, an empty request is used mostly used with the `RPC style` method where the content in a request is not needed (in most cases). RPC style endpoints focus on `performing` one action right (procedures, command) easier than REST API-based endpoints. It is not as scalable as REST API style. RPC is mostly used with HTTP: GET (to fetch information) and POST (to everything else) in CA api is it used with POST HTTP method.'
} as const;

export const $_corpus_update = {
    type: 'object',
    description: "All possible paramaters that can be changed in user corpus. In corpus update `you don't have to use all parameters`, just the parameters you change.",
    properties: {
        expert_mode: {
            type: 'boolean',
            description: 'Set to `True` if you are hard-core.',
            example: false
        },
        name: {
            type: 'string',
            description: 'Corpus name. `Given by user`.',
            example: 'Example corpus 2'
        },
        info: {
            type: 'string',
            description: 'Additional info about corpus.',
            example: 'Example description of user corpus 2'
        },
        document_order: {
            description: 'Can be set to enforce document order within the corpus.',
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        lang_filter: {
            type: 'boolean',
            example: true
        },
        structures: {
            description: 'Available structures or tags in the corpus. Structures like `s` (sentence), `g` (glue), `doc` (document).',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Structure name. Example: `s`'
                    },
                    attributes: {
                        description: 'A list of used attributes in corpus.',
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    description: 'The name of used attribute.'
                                }
                            }
                        }
                    }
                }
            }
        },
        file_structure: {
            type: 'string',
            description: 'The structure in which individual documents should be wrapped. Usually `doc`.',
            example: 'doc'
        },
        onion_structure: {
            type: 'string',
            description: "The structure for deduplication. Usually `p` (paragraph), `doc` or `Null` (no deduplication).'",
            example: 'doc'
        },
        docstructure: {
            type: 'string',
            description: 'Structure in which individual documents should be wrapped. Usually `doc`.',
            example: 'doc'
        },
        sketch_grammar_id: {
            type: 'string',
            description: `\`Sketch grammar ID\` (name of sketch grammar file). For sketch grammars querying. Sketch grammar is a series of rules written in the CQL query  language that search for collocations in a text corpus and categorize them according toÂ their  grammatical relations. Example: \`preloaded/english-penn_tt-3.3.wsdef.m4\`.`,
            example: 'preloaded/english-penn_tt-3.3.wsdef.m4'
        },
        term_grammar_id: {
            type: 'string',
            description: `\`Term grammar ID\` (name of term grammar file). Term grammar tells Sketch Engine which words and phrases should indentify as terms. Example: \`/corpora/wsdef/english-penn_tt-terms-3.1.termdef.m4\`.`,
            example: 'preloaded/english-penn_tt-terms-3.1.termdef.m4'
        }
    }
} as const;

export const $_doc_put_req = {
    type: 'object',
    properties: {
        filename_display: {
            type: 'string',
            description: 'Name of documents.'
        },
        id: {
            type: 'integer',
            description: 'Unique numeric `document ID` to identify individual documents.'
        },
        inProgress: {
            type: 'boolean',
            description: 'Represents whether the currently edited document is in use.'
        },
        isArchive: {
            type: 'boolean',
            description: 'Represents if the updated document is in a format like .zip (created via some archive manager).'
        },
        metadata: {
            type: 'object',
            description: 'Metadata of document. For example, additional `attributes and values`.'
        },
        parameters: {
            type: 'object',
            description: 'Parameters for plaintext extraction.',
            properties: {
                encoding: {
                    type: 'string',
                    description: 'Encoding standard of the document. Usually, `UTF-8`.'
                },
                justext_stoplist: {
                    type: 'string',
                    description: 'Represent the list of unimportant words, in a specified language, from an NLP point of view.'
                },
                permutation: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        description: 'Changing the order of columns (applies only to `type=vert`).'
                    }
                },
                tmx_lang: {
                    type: 'string',
                    description: 'TMX (translation memory exchange). Language of document used for parallel corpus creation.'
                },
                tmx_struct: {
                    type: 'string',
                    description: 'Alignment structure to be used for multilingual documents, `align` is the most used structure. Used within segment distinction, which sentence is in which language and to put sentences with the same meaning into one segment.'
                },
                tmx_untranslated: {
                    type: 'string',
                    description: 'Placeholder for empty segments in multilingual documents. The segments which have no counterpart in a second language of parallel corpus.'
                },
                type: {
                    type: 'string',
                    description: 'File format (.csv, .doc, .docx, .htm, .html etc.).'
                },
                unlegalese: {
                    type: 'boolean',
                    description: 'Convert `all-caps` text to `normal case`.'
                }
            }
        },
        temporary: {
            type: 'boolean',
            description: 'Is document temporary or not.'
        },
        word_count: {
            type: 'integer',
            description: 'Total number of `words` (tokens minus punctuation etc.) in document.'
        },
        vertical_progress: {
            type: 'integer',
            description: 'Progress of `vertical file` creation.'
        },
        vertical_error: {
            type: 'string',
            description: 'An error occured while creating the vertical file. If the creation was succesfull the value is `Null`.'
        }
    }
} as const;

export const $_doc_preview = {
    type: 'object',
    properties: {
        auto_paragraphs: {
            type: 'string',
            description: 'Automatically insert paragraph breaks (`\<p>`) in place of blank lines.'
        },
        encoding: {
            type: 'string',
            description: 'Encoding standard of the document. Usually `UTF-8`.'
        },
        justext_stoplist: {
            type: 'string',
            description: 'Represent the list of unimportant words, in a specified language, from an NLP point of view.'
        },
        permutation: {
            type: 'array',
            items: {
                type: 'integer'
            },
            description: 'Changing the order of columns (applies only to `type=vert`).'
        },
        tmx_lang: {
            type: 'string',
            description: 'TMX (translation memory exchange). Language of document used for parallel corpus creation.'
        },
        tmx_struct: {
            type: 'string',
            description: 'Alignment structure to be used for multilingual documents, `align` is the most used structure. Used within segment distinction, which sentence is in which language and to put sentences with the same meaning into one segment.'
        },
        tmx_untranslated: {
            type: 'string',
            description: 'Placeholder for empty segments in multilingual documents. The segments which have no counterpart in a second language of parallel corpus.'
        },
        type: {
            type: 'string',
            description: 'File format (`.csv`, `.doc`, `.docx`, `.htm`, `.html` etc.).'
        },
        unlegalese: {
            type: 'boolean',
            description: 'Convert `all-caps` text to `normal case`.'
        }
    }
} as const;

export const $_doc_metadata = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            id: {
                type: 'integer',
                description: 'Unique numeric `document ID`.'
            },
            metadata: {
                type: 'object',
                description: 'Pairs of `attribute_name`:`value`.'
            }
        }
    }
} as const;

export const $_filesets_creation = {
    type: 'object',
    properties: {
        bl_max_total_kw: {
            type: 'integer',
            description: 'Stands for: `blacklist max total keyword`. Means that web page or document will be discarded if it contains more words from the denylist (blacklist) than this limit.'
        },
        bl_max_unique_kw: {
            type: 'integer',
            description: 'Stands for: `blacklist max unique keyword`. Means that web page or document will be discarded if it contains more unique words from the denylist (blacklist) than this limit.'
        },
        black_list: {
            type: 'string',
            description: "A list (separated by whitespaces) of `blocked words`, words you don't want to see in your future corpus."
        },
        input_type: {
            type: 'string',
            description: 'Input types the web-crawler will works with. Example: `urls`'
        },
        max_cleaned_file_size: {
            type: 'integer',
            description: 'Web pages and documents with a size `over` this limit (`in kB`) will be ignored.'
        },
        max_file_size: {
            type: 'integer',
            description: 'Web pages and documents with a size `over` this limit (`in kB`) will be ignored.'
        },
        min_cleaned_file_size: {
            type: 'integer',
            description: 'Web pages and documents `smaller` than this limit (`in kB`) after cleaning will be ignored. Cleaning involves conversion to plain text, removing boilerplate text (e.g. navigation menus, legal text, disclaimers and other repetitive content).'
        },
        min_file_size: {
            type: 'integer',
            description: 'Web pages and documents with a `size below` this limit (`in kB`) will be ignored.'
        },
        name: {
            type: 'integer',
            description: 'Texts will be organized into a corpus folder `with this name`.'
        },
        seed_words: {
            description: 'A list of words according to which the `URLs` were chosen to be searched.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        white_list: {
            type: 'string',
            description: 'A list (separated by whitespaces) of `allowed words`, words you want to see in your future corpus.'
        },
        wl_min_kw_ratio: {
            type: 'integer',
            description: 'Stands for: `whitelist minimal keywords ratio`. Means that web page or document will be included only if the `percentage` of allowlist words compared to total words is `higher` than this limit.'
        },
        wl_min_total_kw: {
            type: 'integer',
            description: 'Stands for: `whitelist minimal total keywords`. Means that web page or document will be included only if it contains `more words` from the `allowlist` (whitelist) than this limit.'
        },
        wl_min_unique_kw: {
            type: 'integer',
            description: 'Stands for: `whitelist minimal unique keywords`. Means that a web page or document will be included only if it contains `more words` from the `allowlist` (whitelist) than this limit.'
        }
    }
} as const;

export const $_somefiles_put = {
    type: 'object',
    properties: {
        corpora: {
            type: 'object',
            properties: {
                guessed_language_code: {
                    type: 'object',
                    properties: {
                        language_id: {
                            type: 'string',
                            description: 'Language iso-code. `ISO 639-1`.'
                        },
                        name: {
                            type: 'string',
                            description: 'Language name in `English`.'
                        }
                    }
                }
            }
        }
    }
} as const;

export const $_corpora_list = {
    type: 'object',
    properties: {
        id: {
            description: 'Unique numeric `corpus ID` for corpus building.',
            type: 'integer'
        },
        owner_id: {
            description: 'Unique numeric `owner ID` (usually you).',
            type: 'integer'
        },
        owner_name: {
            description: 'Corpus `owner name` (usually you).',
            type: 'string'
        },
        corpname: {
            description: 'Unique `corpus name` for corpus querying.',
            type: 'string'
        },
        language_id: {
            description: 'Language iso-code. `ISO 639-1`.',
            type: 'string'
        },
        language_name: {
            type: 'string',
            description: 'Language name in `English`.'
        },
        tagset_id: {
            type: 'integer',
            description: `\`Tagset ID\`. Tagset is list of part-of-speech tags (POS tags) for specified language. They are \`preselected\` to the most relevant one and can be changed only in user corpora. \`Tagsets\` can be refered also as \`templates\`.`
        },
        sketch_grammar_id: {
            type: 'string',
            description: `\`Sketch grammar ID\`. Sketch grammar is a series of rules written in the CQL query language that search for collocations in a text corpus and categorize them according toÂ their grammatical relations.`
        },
        term_grammar_id: {
            type: 'string',
            description: `\`Term grammar ID\`. Term grammar tells Sketch Engine which words and phrases should indentify as terms.`
        },
        sizes: {
            type: 'object',
            description: 'Corpus sizes. `Null` if corpus is not compiled.',
            properties: {
                doccount: {
                    type: 'integer',
                    description: 'Total number of `documents` in corpus.'
                },
                parcount: {
                    type: 'integer',
                    description: 'Total number of `paragraphs` in corpus.'
                },
                sentcount: {
                    type: 'integer',
                    description: 'Total number of `sentences` in corpus.'
                },
                wordcount: {
                    type: 'integer',
                    description: 'Total number of `words` (tokens minus punctuation etc.) in corpus.'
                },
                tokencount: {
                    type: 'integer',
                    description: 'Total number of `tokens` in corpus.'
                }
            }
        },
        created: {
            type: 'string',
            description: 'Date and time of corpus creation in format `YYYY-MM-DD HH:MM:SS`.'
        },
        needs_recompiling: {
            type: 'boolean',
            description: `\`True\` if corpus documents have been altered since last compilation.`
        },
        user_can_read: {
            type: 'boolean',
            description: 'Corpus can be queried a `specific user`. Ignore all corpora where this is false.'
        },
        user_can_refer: {
            type: 'boolean',
            description: 'Corpus can be used as a `reference corpus` even by anonymous users.'
        },
        user_can_upload: {
            type: 'boolean',
            description: 'Corpus is owned by you or shared with you. You can upload documents to it.'
        },
        user_can_manage: {
            description: 'Corpus is owned by you or shared with you with `full privileges`.',
            type: 'boolean'
        },
        is_shared: {
            type: 'boolean',
            description: 'True if corpus is shared with other users.'
        },
        new_version: {
            type: 'string',
            description: 'If set, the old corpus is deprecated in favor of a new one.'
        },
        name: {
            type: 'string',
            description: 'Corpus name. `Given by user.`'
        },
        info: {
            type: 'string',
            description: 'Additional info about corpus.'
        },
        aligned: {
            description: 'List of other corpora (corpus ID) within the `same` multi-lingual set (parallel corpus).',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        docstructure: {
            type: 'string',
            description: 'Structure in which individual documents should be wrapped. Usually `doc`.'
        }
    }
} as const;

export const $_corpora_single = {
    type: 'object',
    properties: {
        id: {
            description: 'Unique numeric `corpus ID` for corpus building.',
            type: 'integer'
        },
        owner_id: {
            description: 'Unique numeric `owner ID` (usually you).',
            type: 'integer'
        },
        owner_name: {
            description: 'Corpus `owner name` (usually you).',
            type: 'string'
        },
        corpname: {
            description: 'Unique `corpus name` for corpus querying.',
            type: 'string'
        },
        language_id: {
            description: 'Language iso-code. `ISO 639-1`.',
            type: 'string'
        },
        language_name: {
            description: 'Language name in `English`.',
            type: 'string'
        },
        sketch_grammar_id: {
            description: `\`Sketch grammar ID\` (name of sketch grammar file). Sketch grammar is a series of rules written in the CQL query language that search for collocations in a text corpus and categorize them according toÂ their grammatical relations. Example: \`preloaded/english-penn_tt-3.3.wsdef.m4\`.`,
            type: 'string'
        },
        term_grammar_id: {
            description: `\`Term grammar ID\` (name of term grammar file). Term grammar tells Sketch Engine which words and phrases should indentify as terms. Example: \`/corpora/wsdef/english-penn_tt-terms-3.1.termdef.m4\`.`,
            type: 'string'
        },
        sizes: {
            description: 'Corpus sizes. `Null` if corpus is not compiled.',
            type: 'object',
            properties: {
                doccount: {
                    type: 'integer',
                    description: 'Total number of `documents` in corpus.'
                },
                parcount: {
                    type: 'integer',
                    description: 'Total number of `paragraphs` in corpus.'
                },
                sentcount: {
                    type: 'integer',
                    description: 'Total number of `sentences` in corpus.'
                },
                wordcount: {
                    type: 'integer',
                    description: 'Total number of `words` (tokens minus punctuation etc.) in corpus.'
                },
                tokencount: {
                    type: 'integer',
                    description: 'Total number of `tokens` in corpus.'
                }
            }
        },
        created: {
            type: 'string',
            description: 'Date and time of corpus creation in format `YYYY-MM-DD HH:MM:SS`.'
        },
        needs_recompiling: {
            description: 'True if corpus documents have been altered since last compilation.',
            type: 'boolean'
        },
        user_can_read: {
            type: 'boolean',
            description: 'Corpus can be queried by a `specific user`. Ignore all corpora where this is false.'
        },
        user_can_refer: {
            type: 'boolean',
            description: 'Corpus can be used as a `reference corpus` even by anonymous users.'
        },
        user_can_upload: {
            type: 'boolean',
            description: 'Corpus is owned by you or shared with and you can upload documents to it.'
        },
        user_can_manage: {
            description: 'Corpus is owned by you or shared with you with `full privileges`.',
            type: 'boolean'
        },
        is_shared: {
            type: 'boolean',
            description: `\`True\` if corpus is shared with other users.`
        },
        new_version: {
            type: 'string',
            description: 'If set, the old corpus is deprecated in favor of a new one.'
        },
        name: {
            description: 'Corpus name. `Given by user`.',
            type: 'string'
        },
        info: {
            description: 'Additional info about corpus.',
            type: 'string'
        },
        aligned: {
            description: 'Other corpora within the `same` multi-lingual set (parallel corpus).',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        docstructure: {
            description: 'Structure in which individual documents should be wrapped. Usually `doc`.',
            type: 'string'
        },
        is_error_corpus: {
            description: 'Current state of corpus.',
            type: 'boolean'
        },
        attrlist: {
            description: 'Attributes appearing in corpus documents. Attributes like: `word`, `tag`, `lempos`, `pos`, `lemma`, etc.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        tagset_id: {
            description: 'Tagset ID. Tagset is list of part-of-speech tags (POS tags) for specified language. They are `preselected` to the most relevant one and can be changed only in user corpora. The terms `tagset` and `templates` are interchangeable.',
            type: 'integer'
        },
        reference_corpus: {
            description: 'Default reference corpus for `keyword extraction`.',
            type: 'string'
        },
        progress: {
            description: 'Compilation status: `0` if not compiled, `100` if compiled successfully, `-1` if failed, otherwise in progress.',
            type: 'integer'
        },
        error: {
            description: 'Informs about last compilation error, if any error `None`.',
            type: 'string'
        },
        document_count: {
            description: 'The amount of documents the corpus was build from.',
            type: 'integer'
        },
        can_be_upgraded: {
            description: `\`True\` if corpus template is outdated and can be upgraded. The terms \`tagset\` and \`templates\` are interchangeable.`,
            type: 'boolean'
        },
        available_structures: {
            description: 'All `structures`/`attributes` that appear in corpus documents.',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Structure name.'
                    },
                    freq: {
                        type: 'integer',
                        description: 'Frequency of structure.'
                    },
                    attributes: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'List of used attributes.'
                        }
                    }
                }
            }
        },
        file_structure: {
            description: 'The structure in which individual documents should be wrapped. Usually `doc`.',
            type: 'string'
        },
        onion_structure: {
            description: "The structure for deduplication. Usually `p` (paragraph) or `Null` (no deduplication).'",
            type: 'string'
        },
        expert_mode: {
            description: 'Set to `True` if you are hard-core.',
            type: 'boolean'
        },
        document_order: {
            description: 'Not mandatory. Can be set to enforce document order within the corpus.',
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        use_all_structure: {
            description: 'Use `all` structures available in corpus.',
            type: 'boolean'
        },
        structures: {
            description: 'Available `structures` or `tags` in the corpus. Structures like `s` (sentence), `g` (glue), `doc` (document).',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Structure name.'
                    },
                    attributes: {
                        description: 'A list of used attributes in corpus.',
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    description: 'The name of used attribute.'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} as const;

export const $_can_be_compiled = {
    type: 'object',
    properties: {
        result: {
            type: 'object',
            properties: {
                can_be_compiled: {
                    type: 'boolean',
                    description: 'True, if the corpus does not contain any potential error, which can break compilation.'
                },
                reason: {
                    type: 'string',
                    description: 'Description of problem why it cannot be compiled. If none Null. Example: `QUOTA_EXCEEDED` or `EMPTY`.'
                }
            }
        },
        error: {
            type: 'string',
            description: 'Unexpected server error. If none Null.'
        }
    }
} as const;

export const $_get_progress = {
    type: 'object',
    properties: {
        result: {
            type: 'object',
            properties: {
                progress: {
                    type: 'integer',
                    description: 'Compilation status: `0` if not compiled, `100` if compiled successfully, `-1` if failed, otherwise in progress.'
                },
                error: {
                    type: 'string',
                    example: '',
                    description: 'Problem description. If none Null.'
                }
            }
        },
        error: {
            type: 'string',
            example: '',
            description: 'Unexpected server error. If none Null.'
        }
    }
} as const;

export const $_corpora_single_full = {
    type: 'object',
    properties: {
        id: {
            description: 'Unique numeric `corpus ID` for corpus building.',
            type: 'integer'
        },
        owner_id: {
            description: 'Unique numeric `owner ID` (usually you).',
            type: 'integer'
        },
        owner_name: {
            description: 'Corpus `owner name` (usually you).',
            type: 'string'
        },
        corpname: {
            description: 'Unique `corpus name` for corpus querying.',
            type: 'string'
        },
        language_id: {
            description: 'Language iso-code. `ISO 639-1`.',
            type: 'string'
        },
        language_name: {
            description: 'Language name in `English`.',
            type: 'string'
        },
        sketch_grammar_id: {
            description: `\`Sketch grammar ID\` (name of sketch grammar file). Sketch grammar is a series of rules written in the CQL query language that search for collocations in a text corpus and categorize them according toÂ their grammatical relations. Example: \`preloaded/english-penn_tt-3.3.wsdef.m4\`.`,
            type: 'string'
        },
        term_grammar_id: {
            description: `\`Term grammar ID\` (name of term grammar file). Term grammar tells Sketch Engine which words and phrases should indentify as terms. Example: \`/corpora/wsdef/english-penn_tt-terms-3.1.termdef.m4\`.`,
            type: 'string'
        },
        sizes: {
            description: 'Corpus sizes. `Null` if corpus is not compiled.',
            type: 'object',
            properties: {
                doccount: {
                    type: 'integer',
                    description: 'Total number of `documents` in corpus.'
                },
                parcount: {
                    type: 'integer',
                    description: 'Total number of `paragraphs` in corpus.'
                },
                sentcount: {
                    type: 'integer',
                    description: 'Total number of `sentences` in corpus.'
                },
                wordcount: {
                    type: 'integer',
                    description: 'Total number of `words` (tokens minus punctuation etc.) in corpus.'
                },
                tokencount: {
                    type: 'integer',
                    description: 'Total number of `tokens` in corpus.'
                }
            }
        },
        is_sgdev: {
            type: 'boolean',
            description: 'TODO'
        },
        is_featured: {
            type: 'boolean',
            description: 'TOOD'
        },
        access_level: {
            type: 'boolean',
            description: 'TODO'
        },
        access_on_demand: {
            type: 'boolean',
            description: 'TODO'
        },
        terms_of_use: {
            type: 'string',
            description: 'TODO'
        },
        sort_to_end: {
            type: 'boolean',
            description: 'TODO'
        },
        tags: {
            type: 'array',
            items: {
                type: 'string',
                description: 'TODO'
            }
        },
        created: {
            type: 'string',
            description: 'Date and time of corpus creation in format `YYYY-MM-DD HH:MM:SS`.'
        },
        needs_recompiling: {
            description: 'True if corpus documents have been altered since last compilation.',
            type: 'boolean'
        },
        user_can_read: {
            type: 'boolean',
            description: 'Corpus can be queried by a `specific user`. Ignore all corpora where this is false.'
        },
        user_can_refer: {
            type: 'boolean',
            description: 'Corpus can be used as a `reference corpus` even by anonymous users.'
        },
        user_can_upload: {
            type: 'boolean',
            description: 'Corpus is owned by you or shared with and you can upload documents to it.'
        },
        user_can_manage: {
            description: 'Corpus is owned by you or shared with you with `full privileges`.',
            type: 'boolean'
        },
        is_shared: {
            type: 'boolean',
            description: `\`True\` if corpus is shared with other users.`
        },
        new_version: {
            type: 'string',
            description: 'If set, the old corpus is deprecated in favor of a new one.'
        },
        name: {
            description: 'Corpus name. `Given by user`.',
            type: 'string'
        },
        info: {
            description: 'Additional info about corpus.',
            type: 'string'
        },
        wsdef: {
            description: 'Default word sketch definition. Example: `/corpora/wsdef/serbian-multext-rft1-1.0.wsdef.txt`.',
            type: 'string'
        },
        termdef: {
            description: 'Default term definition.',
            type: 'string'
        },
        diachronic: {
            description: 'Is this corpus developing over time to keep track in vocabulary changes, grammar and language usage. If yes what time period does the corpus cover.',
            type: 'string'
        },
        aligned: {
            description: 'Other corpora within the `same` multi-lingual set (parallel corpus).',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        docstructure: {
            description: 'Structure in which individual documents should be wrapped. Usually `doc`.',
            type: 'string'
        },
        is_error_corpus: {
            description: 'Current state of corpus.',
            type: 'boolean'
        },
        attrlist: {
            description: 'Attributes appearing in corpus documents. Attributes like: `word`, `tag`, `lempos`, `pos`, `lemma`, etc.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        tagset_id: {
            description: 'Tagset ID. Tagset is list of part-of-speech tags (POS tags) for specified language. They are `preselected` to the most relevant one and can be changed only in user corpora. The terms `tagset` and `templates` are interchangeable.',
            type: 'integer'
        },
        reference_corpus: {
            description: 'Default reference corpus for `keyword extraction`.',
            type: 'string'
        },
        progress: {
            description: 'Compilation status: `0` if not compiled, `100` if compiled successfully, `-1` if failed, otherwise in progress.',
            type: 'integer'
        },
        error: {
            description: 'Informs about last compilation error, if any error `None`.',
            type: 'string'
        },
        document_count: {
            description: 'The amount of documents the corpus was build from.',
            type: 'integer'
        },
        can_be_upgraded: {
            description: `\`True\` if corpus template is outdated and can be upgraded. The terms \`tagset\` and \`templates\` are interchangeable.`,
            type: 'boolean'
        },
        available_structures: {
            description: 'All `structures`/`attributes` that appear in corpus documents.',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Structure name.'
                    },
                    freq: {
                        type: 'integer',
                        description: 'Frequency of structure.'
                    },
                    attributes: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'List of used attributes.'
                        }
                    }
                }
            }
        },
        file_structure: {
            description: 'The structure in which individual documents should be wrapped. Usually `doc`.',
            type: 'string'
        },
        onion_structure: {
            description: "The structure for deduplication. Usually `p` (paragraph) or `Null` (no deduplication).'",
            type: 'string'
        },
        expert_mode: {
            description: 'Set to `True` if you are hard-core.',
            type: 'boolean'
        },
        document_order: {
            description: 'Not mandatory. Can be set to enforce document order within the corpus.',
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        use_all_structure: {
            description: 'Use `all` structures available in corpus.',
            type: 'boolean'
        },
        structures: {
            description: 'Available `structures` or `tags` in the corpus. Structures like `s` (sentence), `g` (glue), `doc` (document).',
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Structure name.'
                    },
                    attributes: {
                        description: 'A list of used attributes in corpus.',
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    description: 'The name of used attribute.'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} as const;

export const $_documents_get = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            id: {
                type: 'integer',
                description: 'Unique numeric `document ID` to identify individual documents from which the corpus was created.'
            },
            filename_display: {
                type: 'string',
                description: 'The name of the document.'
            },
            parameters: {
                description: 'Parameters for plaintext extraction.',
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        description: 'File format. Possible formats: `.csv`, `.doc`, `.docx`, `.htm`, `.html` etc..'
                    },
                    encoding: {
                        type: 'string',
                        description: 'Encoding standard of the document. Usually `UTF-8`.'
                    },
                    tmx_lang: {
                        type: 'string',
                        description: 'TMX (translation memory exchange). Language of document used for parallel corpus creation.'
                    },
                    tmx_struct: {
                        type: 'string',
                        description: 'Alignment structure to be used for multilingual documents, `align` is the most used structure. Used within segment distinction, which sentence is in which language and to put sentences with the same meaning into one segment.'
                    },
                    unlegalese: {
                        type: 'boolean',
                        description: 'Convert `all-caps` text to `normal case`.'
                    },
                    permutation: {
                        type: 'array',
                        items: {
                            type: 'integer',
                            description: 'Changing the order of columns (applies only to `type=vert`).'
                        }
                    },
                    auto_paragraphs: {
                        type: 'string',
                        description: 'Automatically insert paragraph breaks (\<p>) in place of blank lines.'
                    },
                    justext_stoplist: {
                        type: 'string',
                        description: 'Represent the list of unimportant words, in a specified language, from an NLP point of view.'
                    },
                    tmx_untranslated: {
                        type: 'string',
                        description: 'Placeholder for empty segments in multilingual documents. The segments which have no counterpart in a second language of parallel corpus.'
                    }
                }
            },
            temporary: {
                type: 'boolean',
                description: 'Is document temporary or not.'
            },
            word_count: {
                type: 'integer',
                description: 'Total number of `words` (tokens minus punctuation etc.) in document.'
            },
            vertical_progress: {
                type: 'integer',
                description: 'Progress of `vertical file` creation.'
            },
            vertical_error: {
                description: 'An error occured while creating the vertical file. If the creation was succesfull the value is `Null`.',
                type: 'string'
            },
            metadata: {
                type: 'object',
                description: 'Metadata of document. For example, additional `attributes and values`.'
            }
        }
    }
} as const;

export const $_documents_post = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            id: {
                type: 'integer',
                description: 'Unique numeric `document ID` to identify individual documents from which the corpus was created.'
            },
            filename_display: {
                type: 'string',
                description: 'The name of the document.'
            },
            parameters: {
                description: 'Parameters for plaintext extraction.',
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        description: 'File format. Possible formats: `.csv`, `.doc`, `.docx`, `.htm`, `.html` etc..'
                    },
                    tmx_struct: {
                        type: 'string',
                        description: 'Alignment structure to be used for multilingual documents, `align` is the most used structure. Used within segment distinction, which sentence is in which language and to put sentences with the same meaning into one segment.'
                    },
                    tmx_untranslated: {
                        type: 'string',
                        description: 'Placeholder for empty segments in multilingual documents. The segments which have no counterpart in a second language of parallel corpus.'
                    },
                    unlegalese: {
                        type: 'boolean',
                        description: 'Convert `all-caps` text to `normal case`.'
                    },
                    justext_stoplist: {
                        type: 'string',
                        description: 'Represent the list of unimportant words, in a specified language, from an NLP point of view.'
                    },
                    tmx_lang: {
                        type: 'string',
                        description: 'TMX (translation memory exchange). Language of document used for parallel corpus creation.'
                    },
                    permutation: {
                        type: 'array',
                        items: {
                            type: 'integer',
                            description: 'Changing the order of columns (applies only to `type=vert`).'
                        }
                    }
                }
            },
            temporary: {
                type: 'boolean',
                description: 'Is document temporary or not.'
            },
            word_count: {
                type: 'integer',
                description: 'Total number of `words` (tokens minus punctuation etc.) in document.'
            },
            vertical_progress: {
                type: 'integer',
                description: 'Progress of `vertical file` creation.'
            },
            vertical_error: {
                description: 'An error occured while creating the vertical file. If the creation was succesfull the value is `Null`.',
                type: 'string'
            },
            metadata: {
                description: 'Metadata of document. For example, additional `attributes and values`.',
                type: 'object'
            }
        }
    }
} as const;

export const $_doc_preview = {
    type: 'object',
    properties: {
        result: {
            type: 'string',
            description: 'Showcase of few lines from the file the corpus was created from (1kB).'
        },
        error: {
            type: 'string',
            description: 'Unexpected server error. If none Null.'
        }
    }
} as const;

export const $_rpc_expand_archive = {
    type: 'object',
    properties: {
        result: {
            type: 'integer',
            description: 'Returns fileset ID.'
        },
        error: {
            type: 'string',
            description: 'Unexpected server error. If none Null.'
        }
    }
} as const;

export const $_not_found_404 = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            example: 'PreloadedCorpus/UserCorpus/Document/Tagset/Grammar/GdexConf matching query does not exist.'
        }
    }
} as const;

export const $_not_found_RPC = {
    type: 'object',
    properties: {
        result: {
            type: 'boolean',
            description: 'Result of succesfully finished request otherwise Null.'
        },
        error: {
            type: 'string',
            example: 'PreloadedCorpus/UserCorpus/Document/Tagset/Grammar/GdexConf/SiteLicence matching query does not exist.'
        }
    }
} as const;

export const $_bad_request_RPC_1 = {
    type: 'object',
    properties: {
        result: {
            type: 'boolean',
            description: 'Result of succesfully finished request otherwise Null.',
            example: true
        },
        error: {
            type: 'string',
            description: 'Examples: `READ_ONLY`, `INVALID_CORPUS_IDS`. You do not have permissions for it or you inputted IDs are not correct.'
        }
    }
} as const;

export const $_bad_request_RPC_8 = {
    type: 'object',
    properties: {
        result: {
            type: 'boolean',
            description: 'Result of succesfully finished request otherwise Null.'
        },
        error: {
            type: 'string',
            description: 'Examples: `QUOTA_EXCEEDED`, `READ_ONLY`, `INVALID_CORPUS_IDS`, `CORPUS_BUSY`.'
        }
    }
} as const;

export const $_bad_request_RPC_9 = {
    type: 'object',
    properties: {
        result: {
            type: 'boolean',
            description: 'Result of succesfully finished request otherwise Null.'
        },
        error: {
            type: 'string',
            description: 'Examples: `QUOTA_EXCEEDED`, `READ_ONLY`.'
        }
    }
} as const;

export const $_bad_request_10 = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Examples: `QUOTA_EXCEEDED`, `READ_ONLY`, `CORPUS_BUSY`, `DAILY_TAGGING_EXCEEDED`, `INVALID_URL`, `NO_DATA`.'
        }
    }
} as const;

export const $_bad_request_11 = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Examples: `READ_ONLY`, `CORPUS_BUSY`, `INVALID_METADATA`.'
        }
    }
} as const;

export const $_bad_request_12 = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Examples: `READ_ONLY`, `CORPUS_BUSY`.'
        }
    }
} as const;

export const $_bad_request_13 = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Examples: `READ_ONLY`.'
        }
    }
} as const;

export const $_bad_request_14 = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Examples: `READ_ONLY`, `QUOTA_EXCEEDED`, `DAILY_TAGGING_EXCEEDED`, `CORPUS_BUSY`.'
        }
    }
} as const;

export const $_bad_request_20 = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Examples: `READ_ONLY`, `QUOTA_EXCEEDED`, `DAILY_TAGGING_EXCEEDED`, `NO_DATA`.'
        }
    }
} as const;

export const $_forbidden_normal = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Example: `Permission denied`. You do not have required permissions for specified corpus, document, template or other stuff. Permissions like (read, manage, edit, delete, superuser, etc.).'
        }
    }
} as const;

export const $_forbidden = {
    type: 'object',
    properties: {
        result: {
            type: 'boolean',
            description: 'Result of succesfully finished request otherwise Null.'
        },
        error: {
            type: 'string',
            description: 'Example: `Permission denied`. You do not have required permissions for specified corpus, document, template or other stuff. Permissions like (read, manage, edit, delete, superuser, etc.).'
        }
    }
} as const;

export const $_unauthorized = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'Exampple: `Unauthorized`. You need to authorize first, use API key from Sketch Engine.'
        }
    }
} as const;

export const $_unauthorized_rpc = {
    type: 'object',
    properties: {
        result: {
            type: 'boolean',
            description: 'Result of succesfully finished request otherwise Null.'
        },
        error: {
            type: 'string',
            description: 'Example: `Unauthorized`. You need to authorize first, use API key from Sketch Engine.'
        }
    }
} as const;

export const $_fileset = {
    type: 'object',
    properties: {
        progress: {
            type: 'integer',
            description: 'Fileset creation status: `0` if not started, `100` if finished succesfully, -1 if failed, otherwise in progress. Example: downloading content for corpus creation from the Internet.'
        },
        time_elapsed: {
            type: 'integer',
            description: 'Duration of action with filesets (in seconds).'
        },
        error: {
            type: 'string',
            description: 'Description of problem. If none Null.'
        },
        id: {
            type: 'integer',
            description: 'Fileset ID.'
        },
        name: {
            type: 'string',
            description: 'Fileset name. `Given by user (except the main one with ID = 0).`'
        },
        word_count: {
            type: 'integer',
            description: 'Total number of `words` (tokens minus punctuation etc.) in document.'
        },
        web_crawl: {
            type: 'object',
            properties: {
                input_type: {
                    type: 'string',
                    description: `\`Source URL\` from where the words were downloaded/extracted: website, documents...`
                },
                seed_words: {
                    type: 'array',
                    items: {
                        type: 'string',
                        description: 'A `List of words` acording which the web-crawler will search and gather data from URLs containing them.'
                    }
                },
                urls: {
                    type: 'array',
                    items: {
                        type: 'string',
                        description: 'A `List of URLs` to be searched by web-crawler.'
                    }
                },
                site: {
                    type: 'array',
                    items: {
                        type: 'string',
                        description: 'Specific website to be searched by web-crawler.'
                    }
                },
                data_downloaded: {
                    type: 'integer',
                    description: 'The amount of data `downloaded` by a web-crawler to create corpus.'
                },
                remaining_files_count: {
                    type: 'integer',
                    description: 'Counter of files found by web-crawler during crawling, `waiting` to be processed.'
                },
                processed_files_count: {
                    type: 'integer',
                    description: 'Counter of `already processed` files.'
                },
                unprocessed_files_count: {
                    type: 'integer',
                    description: 'Counter of files which `cannot` be processed because `invalid content type`, `size`, `duplication` etc..'
                },
                invalid_content_types_count: {
                    type: 'integer',
                    description: 'Counter of files containing content like `navigation links`, `advertisement`, `headers`, `footers` etc..'
                },
                unable_to_convert_count: {
                    type: 'integer',
                    description: 'Counter for files whose format cannot be converted to one of the supported formats.'
                },
                duplicate_count: {
                    type: 'integer',
                    description: 'Counter for files with repeating content.'
                },
                time_elapsed: {
                    type: 'integer',
                    description: 'Duration of words gathering with web-crawler (in seconds).'
                },
                average_file_processing_time: {
                    type: 'integer',
                    description: 'Average time to process single file (in seconds).'
                }
            }
        }
    }
} as const;

export const $_filesets_get_progress = {
    type: 'object',
    properties: {
        result: {
            type: 'object',
            properties: {
                progress: {
                    type: 'integer',
                    description: 'Fileset creation status: `0` if not started, `100` if finished succesfully, -1 if failed, otherwise in progress. Example: downloading content for corpus creation from the Internet.'
                },
                time_elapsed: {
                    type: 'number',
                    format: 'float',
                    description: 'Duration of action with filesets (in second).'
                },
                error: {
                    type: 'string',
                    description: 'Description of problem why it cannot be done.'
                },
                word_count: {
                    type: 'integer',
                    description: 'Amount of words(tokens minus punctuation etc.) downloaded by web-crawler.'
                }
            }
        },
        error: {
            type: 'string',
            description: 'Unexpected server error.'
        }
    }
} as const;

export const $_fileset_creation = {
    type: 'object',
    properties: {
        progress: {
            type: 'integer',
            description: 'Fileset creation status: `0` if not started, `100` if finished succesfully, -1 if failed, otherwise in progress. Example: downloading content for corpus creation from the Internet.'
        },
        time_elapsed: {
            type: 'integer',
            description: 'Duration of action with filesets (in seconds).'
        },
        error: {
            type: 'string',
            description: 'Description of problem. If none Null.'
        },
        id: {
            type: 'integer',
            description: 'Fileset ID.'
        },
        name: {
            type: 'string',
            description: 'Fileset name. `Given by user (except the main one with ID = 0).`'
        },
        word_count: {
            type: 'integer',
            description: 'Total number of `words` (tokens minus punctuation etc.) in document.'
        },
        web_crawl: {
            type: 'object',
            properties: {
                input_type: {
                    type: 'string',
                    description: `\`Source URL\` from where the words were downloaded/extracted: website, documents...`
                },
                seed_words: {
                    type: 'array',
                    items: {
                        type: 'string',
                        description: 'A `List of words` acording which the web-crawler will search and gather data from URLs containing them.'
                    }
                },
                urls: {
                    type: 'array',
                    items: {
                        type: 'string',
                        description: 'A `List of URLs` to be searched by web-crawler.'
                    }
                },
                site: {
                    type: 'array',
                    items: {
                        type: 'string',
                        description: 'Specific website to be searched by web-crawler.'
                    }
                },
                data_downloaded: {
                    type: 'integer',
                    description: 'The amount of data `downloaded` by a web-crawler to create corpus.'
                },
                remaining_files_count: {
                    type: 'integer',
                    description: 'Counter of files found by web-crawler during crawling, `waiting` to be processed.'
                },
                processed_files_count: {
                    type: 'integer',
                    description: 'Counter of `already processed` files.'
                },
                unprocessed_files_count: {
                    type: 'integer',
                    description: 'Counter of files which `cannot` be processed because `invalid content type`, `size`, `duplication` etc..'
                },
                invalid_content_types_count: {
                    type: 'integer',
                    description: 'Counter of files containing content like `navigation links`, `advertisement`, `headers`, `footers` etc..'
                },
                unable_to_retrieve_count: {
                    type: 'integer',
                    description: 'Cannot return count.'
                },
                invalid_size_count: {
                    type: 'integer',
                    description: 'Counter for sizes that are bigger or smaller as defined limits (max_file_size, min_file_size).'
                },
                invalid_cleaned_size_count: {
                    type: 'integer',
                    description: 'Counter for sizes that are bigger or smaller as defined limits (max_file_size, min_file_size).'
                },
                keywords_filter_applied_count: {
                    type: 'integer',
                    description: 'Amounth of filter usage.'
                },
                unable_to_convert_count: {
                    type: 'integer',
                    description: 'Counter for files whose format cannot be converted to one of the supported formats.'
                },
                duplicate_count: {
                    type: 'integer',
                    description: 'Counter for files with repeating content.'
                },
                time_elapsed: {
                    type: 'integer',
                    description: 'Duration of words gathering with web-crawler (in seconds).'
                },
                average_file_processing_time: {
                    type: 'integer',
                    description: 'Average time to process single file (in seconds).'
                }
            }
        }
    }
} as const;

export const $_language = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Language iso-code. `ISO 639-1`.'
        },
        name: {
            type: 'string',
            description: 'Language name in `English`.'
        },
        autonym: {
            type: 'string',
            description: 'Language name in that language.'
        },
        default_tagset_id: {
            type: 'string',
            description: `\`Tagset ID.\` Tagset is list of part-of-speech tags (POS tags) for specified language. Defaulty preselected to the most relevant one. For user corpora can be changed. The terms \`tagset\` and \`templates\` are interchangeable.`
        },
        reference_corpus: {
            type: 'string',
            description: 'Default `reference` corpus.'
        },
        has_term_grammar: {
            type: 'boolean',
            description: 'True if `term extraction` is supported.'
        },
        script: {
            type: 'string',
            description: 'Used script. Example: `Latin`, `Cyrillic`, etc.'
        }
    }
} as const;

export const $_rpc_style = {
    type: 'object',
    properties: {
        result: {
            type: 'boolean',
            description: 'Represent whether request was finished successfully or not.'
        },
        error: {
            type: 'string',
            description: 'Unexpected server error. Example: `QUOTA_EXCEEDED`. If none Null.'
        }
    }
} as const;

export const $_somefiles_post = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'An alphanumeric `somefile ID`.'
                },
                name: {
                    type: 'string',
                    description: 'Name of `multilingual file`.'
                },
                file_type: {
                    type: 'string',
                    description: 'File type of multilingual file: `.tmx`, .`.xlsx`, etc.'
                },
                owner_id: {
                    type: 'integer',
                    description: 'Unique numeric `owner ID` (usually you).'
                },
                temporary: {
                    type: 'boolean',
                    description: 'Is document temporary or not.'
                },
                encoding: {
                    type: 'string',
                    description: 'Encoding standard of the document. Usually `UTF-8`.'
                },
                guessed_languages: {
                    type: 'object',
                    description: 'An object of automatically guessed languages of inserted files during multilingual corpus creation. Maximum: `2`, because Sketch Engine support multilingual corpora only from 2 languages yet.',
                    properties: {
                        language_1: {
                            type: 'string'
                        },
                        language_2: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    }
} as const;

export const $_template = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Alphanumeric `template/tagset ID`. The terms `tagset` and `templates` are interchangeable.'
        },
        name: {
            type: 'string',
            description: 'Name of `template/tagset file`.'
        },
        owner_id: {
            type: 'integer',
            description: 'Unique numeric `owner ID` (usually you). If tagset/template is preloaded `Null`.'
        },
        owner_name: {
            type: 'string',
            description: 'Tagset/template `owner name` (usually you). If tagset/template is preloaded `Null`.'
        },
        has_pipeline: {
            type: 'boolean',
            description: 'Vertical creation is supported. False for legacy templates.'
        },
        has_tags: {
            type: 'boolean',
            description: 'Morphological tagging is supported.'
        },
        has_lemmas: {
            type: 'boolean',
            description: 'Lemmatization is supported.'
        },
        static_attributes: {
            type: 'array',
            description: 'A list of attributes which can appear in corpus.',
            items: {
                type: 'string'
            }
        },
        structures: {
            type: 'array',
            description: 'A list of used structures. Examples `<s>`, `<g>`.',
            items: {
                type: 'string'
            }
        },
        tagsetdoc: {
            type: 'string',
            description: `\`URL\` leading to template/tagset documentation.`
        },
        content: {
            type: 'string',
            description: 'Content of tagset.'
        },
        default_sketchgrammar_id: {
            type: 'string',
            description: 'Not ID, as you probably imagine, but filename of preselected sketchgrammar (`.m4` format).'
        },
        default_termgrammar_id: {
            type: 'string',
            description: 'Not ID, as you probably imagine, but filename of preselected sketchgrammar (`.m4` format).'
        },
        sharing: {
            type: 'object',
            properties: {
                users: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'integer',
                                description: 'The ID of user you share template with.'
                            },
                            name: {
                                type: 'string',
                                description: 'The name of user you share template with.'
                            },
                            email: {
                                type: 'string',
                                description: 'The email of user you share template with.'
                            }
                        }
                    }
                },
                user_group: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'integer',
                                description: 'The ID of group you share template with.'
                            },
                            name: {
                                type: 'string',
                                description: 'The name of group you share template with.'
                            }
                        }
                    }
                }
            }
        }
    }
} as const;

export const $_template_put = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Alphanumeric `template/tagset ID`. The terms `tagset` and `templates` are interchangeable.'
        },
        name: {
            type: 'string',
            description: 'Name of `template/tagset file`.'
        },
        owner_id: {
            type: 'integer',
            description: 'Unique numeric `owner ID` (usually you). If tagset/template is preloaded `Null`.'
        },
        owner_name: {
            type: 'string',
            description: 'Tagset/template `owner name` (usually you). If tagset/template is preloaded `Null`.'
        },
        has_pipeline: {
            type: 'boolean',
            description: 'Vertical creation is supported. False for legacy templates.'
        },
        has_tags: {
            type: 'boolean',
            description: 'Morphological tagging is supported.'
        },
        has_lemmas: {
            type: 'boolean',
            description: 'Lemmatization is supported.'
        },
        static_attributes: {
            type: 'array',
            description: 'A list of attributes which can appear in corpus.',
            items: {
                type: 'string'
            }
        },
        structures: {
            type: 'array',
            description: 'A list of used structures. Examples `<s>`, `<g>`.',
            items: {
                type: 'string'
            }
        },
        tagsetdoc: {
            type: 'string',
            description: `\`URL\` leading to template/tagset documentation.`
        },
        content: {
            type: 'string',
            description: 'Content of tagset.'
        },
        default_sketchgrammar_id: {
            type: 'string',
            description: 'Not ID, as you probably imagine, but filename of preselected sketchgrammar (`.m4` format).'
        },
        default_termgrammar_id: {
            type: 'string',
            description: 'Not ID, as you probably imagine, but filename of preselected sketchgrammar (`.m4` format).'
        },
        sharing: {
            type: 'object',
            properties: {
                users: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'integer',
                                description: 'The ID of user you share template with.'
                            }
                        }
                    }
                },
                user_group: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'integer',
                                description: 'The ID of group you share template with.'
                            }
                        }
                    }
                }
            }
        }
    }
} as const;

export const $_get_used_space = {
    type: 'object',
    properties: {
        result: {
            type: 'object',
            properties: {
                space_used: {
                    type: 'integer',
                    description: "The current maximal amount of words in the user's corpora."
                },
                space_total: {
                    type: 'integer',
                    example: 1000000,
                    description: 'Default maximal amount of words. The default is set to `1 000 000` words. It can be changed.'
                }
            }
        },
        error: {
            type: 'string',
            description: 'Unexpected server error. If none Null.'
        }
    }
} as const;